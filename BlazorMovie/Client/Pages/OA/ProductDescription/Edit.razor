@page "/OA/ProductDescription/Edit/{Item}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager


<h3>Editar Descrição de Produto</h3>

<EditForm Model="@productDescription" OnValidSubmit="SubmitProductDescription" @onreset="HandleReset">
    <DataAnnotationsValidator />
    <div class="form-group">
        <br />
        <div class="row col-12">
            <div class="col-5">
                <label>Descrição</label>
                <InputText class="form-control" @bind-Value="@productDescription.Description"></InputText>
                <ValidationMessage For="@(() => productDescription.Description)"></ValidationMessage>
            </div>
        </div>
        <div class="row col-12 d-flex justify-content-center">
            <button class="btn btn-success" type="submit" style="margin-right:10px;">Salvar</button>
            <button class="btn btn-secondary" type="reset">Cancelar</button>
        </div>
    </div>
</EditForm>

@code {
    private string URL = "/v1/OA/ProductDescriptionOA";
    private ProductDescriptionOA productDescription = new ProductDescriptionOA();
    private EditContext editContext { get; set; }

    [Parameter]
    public string Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        productDescription = await Http.GetFromJsonAsync<ProductDescriptionOA>($"{URL}/ById?id={Item}");
        editContext = new EditContext(productDescription);
    }

    private async Task SubmitProductDescription()
    {
        await Http.PutAsJsonAsync(URL, productDescription);
        NavigationManager.NavigateTo("OA/ProductsDescription");
    }

    private void HandleReset()
    {
        productDescription = new ProductDescriptionOA();
        editContext = new EditContext(productDescription);
        NavigationManager.NavigateTo("OA/ProductsDescription");
    }
}
